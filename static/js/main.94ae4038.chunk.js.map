{"version":3,"sources":["panels/Home.js","panels/Buy.js","App.js","index.js"],"names":["Home","platform","id","go","className","title","size","level","onClick","data-to","osName","vkPay","IOS","alert","connect","send","Buy","left","App","useState","activePanel","setActivePanel","popout","useEffect","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"ipBAqCeA,G,MAvBAC,cAEF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAP,OACZ,kBAAC,IAAD,CAAOD,GAAIA,GACV,kBAAC,IAAD,CAAaE,UAAU,UAAvB,qDACC,kBAAC,IAAD,CAAOA,UAAU,QAAQC,MAAM,8CAC9B,kBAAC,IAAD,KACC,uBAAGD,UAAU,QAAb,gTAGA,kBAAC,IAAD,CAAQA,UAAU,UAAUE,KAAK,KAAKC,MAAM,IAAIC,QAASL,EAAIM,UAAQ,OAArE,+D,sDCPCC,EAAST,cAETU,EAAQ,WACb,GAAID,IAAWE,IACd,OACCC,MAAM,svBAIPC,IAAQC,KAAK,sBAAuB,CAAC,OAAU,QAAS,OAAU,oBAAqB,OAAU,CAAC,SAAa,UAAW,YAAgB,OAkC7HC,EA9BH,SAAC,GAAD,IAAGd,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAP,OACX,kBAAC,IAAD,CAAOD,GAAIA,GACV,kBAAC,IAAD,CACAE,UAAU,SAASa,KAAM,kBAAC,IAAD,CAAcT,QAASL,EAAIM,UAAQ,QAC1DC,IAAWE,IAAM,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAF1C,0DAOC,kBAAC,IAAD,CAAOR,UAAU,SAChB,kBAAC,IAAD,KACC,uBAAGA,UAAU,QAAb,oUAGA,uBAAGA,UAAU,QAAb,uGAGA,kBAAC,IAAD,CAAQA,UAAU,UAAUE,KAAK,KAAKC,MAAM,IAAKC,QAASG,GAA1D,gFCTUO,EA3BH,WAAO,IAAD,EACqBC,mBAAS,QAD9B,mBACVC,EADU,KACGC,EADH,OAEcF,mBAAS,MAFvB,gCAGWA,mBAAS,KAAM,kBAAC,IAAD,CAAeb,KAAK,YAH9C,mBAGVgB,EAHU,UAKjBC,qBAAU,WACTT,IAAQU,WAAU,YAAgC,IAAD,IAA5BC,OAAUC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,KACpC,GAAa,yBAATD,EAAiC,CACpC,IAAME,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQJ,EAAKK,OAASL,EAAKK,OAAS,eACpDH,SAASI,KAAKC,WAAWC,aAAaP,SAGtC,IAEH,IAAMzB,EAAK,SAAAiC,GACVf,EAAee,EAAEC,cAAcC,QAAQC,KAGxC,OACC,kBAAC,IAAD,CAAMnB,YAAaA,EAAaE,OAAQA,GACvC,kBAAC,EAAD,CAAMpB,GAAG,OAAOC,GAAIA,IACpB,kBAAC,EAAD,CAAKD,GAAG,MAAMC,GAAIA,MCxBrBW,IAAQC,KAAK,gBAQbyB,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,U","file":"static/js/main.94ae4038.chunk.js","sourcesContent":["import React from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport { platform, IOS, ANDROID } from '@vkontakte/vkui';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\n\nimport './Style.css';\n\nconst osName = platform();\n\nconst Home = ({ id, go }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader className=\"header\">О сервисе</PanelHeader>\n\t\t\t<Group className=\"group\" title=\"+100 к карме\">\n\t\t\t\t<Div> \n\t\t\t\t\t<p className=\"info\">\n\t\t\t\t\tЧто посеешь, то и пожнешь. Такова суть первого закона кармы.\n\t\t\t\t\t</p>\n\t\t\t\t\t<Button className=\"btnNext\" size=\"xl\" level=\"2\" onClick={go} data-to=\"buy\">\n\t\t\t\t\t\tПриступим\n\t\t\t\t\t</Button>\n\t\t\t\t</Div>\n\t\t\t</Group>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Home;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport connect from '@vkontakte/vk-connect';\nimport { platform, IOS, ANDROID } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport CellButton from '@vkontakte/vkui/dist/components/CellButton/CellButton';\n\nimport './Style.css';\n\nconst osName = platform();\n\nconst vkPay = () => {\n\tif (osName === IOS) {\n\t\treturn (\n\t\t\talert(\"К сожалению, покупка не доступна на Вашем устройстве. Для оплаты необходимо открыть приложение в мобильном браузере или десктопную версию сайта.\")\n\t\t);\n\t}\n\telse {\n\t\tconnect.send(\"VKWebAppOpenPayForm\", {\"app_id\": 7297118, \"action\": \"transfer-to-group\", \"params\": {\"group_id\" : 191467857, \"description\" : \"\"}});\n\t}\n}\n\nconst Buy = ({ id, go }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader\n\t\tclassName=\"header\" left={<HeaderButton onClick={go} data-to=\"home\">\n\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t</HeaderButton>}\n\t\t>\n\t\tПриступим\n\t\t</PanelHeader>\n\t\t\t<Group className=\"group\">\n\t\t\t\t<Div> \n\t\t\t\t\t<p className=\"info\">\n\t\t\t\t\tБлаготворительность - одно из сопутствующих улучшению кармы.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className=\"info\">\n\t\t\t\t\t1 рубль - плюс 1 к карме\n\t\t\t\t\t</p>\n\t\t\t\t\t<Button className=\"btnNext\" size=\"xl\" level=\"2\"  onClick={vkPay}>\n\t\t\t\t\t\tПожертвовать\n\t\t\t\t\t</Button>\n\t\t\t\t</Div>\n\t\t\t</Group>\n\t</Panel>\n);\n\nBuy.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Buy;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport './App.css';\nimport Home from './panels/Home';\nimport Buy from './panels/Buy';\n\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(null, <ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' go={go} />\n\t\t\t<Buy id='buy' go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}